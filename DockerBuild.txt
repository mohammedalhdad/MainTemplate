
# · Õ„Ì· «·Õ«ÊÌ… Ê ‘€Ì·Â« »œÊ‰ „·› dockerfile ›Ì dotnet 8 
# ====================================================================================================
With .net 8 you don't need a Dockerfile.
You can build a docker image by running the following command:

dotnet publish src/APIService/APIService.csproj --os linux --arch x64 /t:PublishContainer -c Release --self-contained true




# · ‘€Ì· «·„‘—Ê⁄ „‰ Œ·«·  visual studio «” Œœ„ Â–« «·„·› Ì÷⁄ ›Ì „Ã·œ «· API
# ====================================================================================================
#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER app
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["src/APIService/APIService.csproj", "src/APIService/"]
RUN dotnet restore "./src/APIService/APIService.csproj"
COPY . .
WORKDIR "/src/src/APIService"
RUN dotnet build "./APIService.csproj" -c $BUILD_CONFIGURATION -o /app/build

FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./APIService.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "APIService.dll"]






# ·»‰«¡ «·Õ«ÊÌ… Ê‰”ŒÂ« «·Ï «·”Ì—›— »«” Œœ«„ «Ê«„— cmd
# ====================================================================================================
docker build -t api:latest .
docker save api:latest > api_latest.tar
scp api_latest.tar root@109.199.106.44:/home




›Ì Õ«·… «” Œœ«„ „·› dockerfile »«” Œœ«„ «Ê«„— «· cmd Ì÷⁄ «·„·› ›Ì „Ã·œ «· Solution
====================================================================================================
# Step 1: Use the official Microsoft .NET SDK as the base image for building
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build-env
WORKDIR /app

# Step 2: Copy the solution and Directory.Packages.props for centralized package management
COPY *.sln ./
COPY Directory.Packages.props ./

# Step 3: Copy project files
COPY src/APIService/*.csproj ./src/APIService/
COPY src/Application/*.csproj ./src/Application/
COPY src/Domain/*.csproj ./src/Domain/
COPY src/Infrastructure/*.csproj ./src/Infrastructure/

# Step 4: Restore NuGet packages using Directory.Packages.props
# RUN dotnet restore

# Step 5: Copy the rest of your application files
COPY . ./

# Step 6: Build the project
RUN dotnet build "src/APIService/APIService.csproj" -c Release -o /app/build

# Step 7: Publish the application
RUN dotnet publish "src/APIService/APIService.csproj" -c Release -o /app/publish

# Step 8: Use a runtime image for ASP.NET Core to run the app
FROM mcr.microsoft.com/dotnet/aspnet:8.0
WORKDIR /app
COPY --from=build-env /app/publish .

# Expose the application  ports
EXPOSE 80
EXPOSE 443

# Step 9: Run the application
ENTRYPOINT ["dotnet", "APIService.dll"]
